use base64::{decode_config, URL_SAFE_NO_PAD};
use rsa::pkcs1::DecodeRsaPublicKey;
use rsa::sha2::Sha256;
use rsa::signature::Verifier;
use rsa::RsaPublicKey;
use serde_json::Value;
use std::ffi::{c_char, CStr};

fn base64_url_decode(input: &str) -> Vec<u8> {
    decode_config(input, URL_SAFE_NO_PAD).unwrap()
}

fn verify_jwt_signature(jwt: &str, x5c_certs: &[&str]) -> bool {
    // Split the JWT into its three parts: header, payload, signature
    let parts: Vec<&str> = jwt.split('.').collect();
    if parts.len() != 3 {
        return false;
    }

    let header_and_payload = format!("{}.{}", parts[0], parts[1]);
    let tmp = base64_url_decode(parts[2]);
    let signature = tmp.as_slice();

    for cert_pem in x5c_certs {
        let certpem = x509_parser::pem::parse_x509_pem(cert_pem.as_bytes())
            .unwrap()
            .1;
        let certpem = certpem.parse_x509().unwrap();
        let public_key = certpem.public_key();
        let rsa_pub_key = RsaPublicKey::from_pkcs1_der(public_key.subject_public_key.data).unwrap();
        let is_valid = rsa::pkcs1v15::VerifyingKey::<Sha256>::new(rsa_pub_key).verify(
            header_and_payload.as_bytes(),
            &signature.try_into().unwrap(),
        );

        if is_valid.is_ok() {
            return true;
        }
    }

    // No valid signature found
    false
}

fn check_jwt_property(jwt: &str, property: &str, exp_value: &str) -> bool {
    let parts: Vec<&str> = jwt.split('.').collect();

    let header_bytes = base64_url_decode(parts[0]);
    let payload_bytes = base64_url_decode(parts[1]);

    // Parse the header and payload as JSON
    let header: Value = serde_json::from_slice(&header_bytes).unwrap();
    let payload: Value = serde_json::from_slice(&payload_bytes).unwrap();

    // Check in header
    if let Some(obj) = header.as_object() {
        if obj.contains_key(property) {
            let value = obj.get(property).and_then(|value| value.as_str().map(|s| s.to_string())).unwrap();
            return value == exp_value;
        }
    }

    // Check in body
    if let Some(obj) = payload.as_object() {
        if obj.contains_key(property) {
            let value = obj.get(property).and_then(|value| value.as_str().map(|s| s.to_string())).unwrap();
            return value == exp_value;
        }
    }

    false
}

#[no_mangle]
pub extern "C" fn verify_jwt(jwt_cstr: *const c_char) -> bool {
    let x5c_certs = [
        r#"-----BEGIN CERTIFICATE-----
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VzUwWld3Z1EyOXljRzl5WVhScGIyNHhGREFTQmdOVkJBY01DMU5oYm5SaElFTnNZWEpoTVFzd0NRWURWUVFJCkRBSkRRVEVMTUFrR0ExVUVCaE1DVlZNd0hoY05NalF3TWpJME1ETXlNREk0V2hjTk16RXdNakkwTURNeU1ESTQKV2pCd01TSXdJQVlEVlFRRERCbEpiblJsYkNCVFIxZ2dVRU5MSUVObGNuUnBabWxqWVhSbE1Sb3dHQVlEVlFRSwpEQkZKYm5SbGJDQkRiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WCkJBZ01Ba05CTVFzd0NRWURWUVFHRXdKVlV6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCN0QKdm1HeEJDaWFnRlVoWS95c3hoNDR6V1lPTUZhdUVWdjdzWllxSHhpcXh6Qjl4ZU1XQ21wUmtvRERxNGVYa2NWSQpUK3FJbGg3UXc3a3B1Rm1QalBDamdnTU9NSUlEQ2pBZkJnTlZIU01FR0RBV2dCU1ZiMTNOdlJ2aDZVQkp5ZFQwCk04NEJWd3ZlVkRCckJnTlZIUjhFWkRCaU1HQ2dYcUJjaGxwb2RIUndjem92TDJGd2FTNTBjblZ6ZEdWa2MyVnkKZG1salpYTXVhVzUwWld3dVkyOXRMM05uZUM5alpYSjBhV1pwWTJGMGFXOXVMM1l6TDNCamEyTnliRDlqWVQxdwpiR0YwWm05eWJTWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRlB4RUxtVFE1dnAwcVNjaTYrRDhLQmhEClBDVGNNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQ093WUpLb1pJaHZoTkFRMEIKQklJQ0xEQ0NBaWd3SGdZS0tvWklodmhOQVEwQkFRUVFHNkcxSCs0QnFJZXpHZHpEb0grSUxqQ0NBV1VHQ2lxRwpTSWI0VFFFTkFRSXdnZ0ZWTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VPTUJBR0N5cUdTSWI0VFFFTkFRSUNBZ0VPCk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFRE1CQUdDeXFHU0liNFRRRU5BUUlFQWdFRE1CRUdDeXFHU0liNFRRRU4KQVFJRkFnSUEvekFSQmdzcWhraUcrRTBCRFFFQ0JnSUNBUDh3RUFZTEtvWklodmhOQVEwQkFnY0NBUUV3RUFZTApLb1pJaHZoTkFRMEJBZ2dDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ2tDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ29DCkFRQXdFQVlMS29aSWh2aE5BUTBCQWdzQ0FRQXdFQVlMS29aSWh2aE5BUTBCQWd3Q0FRQXdFQVlMS29aSWh2aE4KQVEwQkFnMENBUUF3RUFZTEtvWklodmhOQVEwQkFnNENBUUF3RUFZTEtvWklodmhOQVEwQkFnOENBUUF3RUFZTApLb1pJaHZoTkFRMEJBaEFDQVFBd0VBWUxLb1pJaHZoTkFRMEJBaEVDQVEwd0h3WUxLb1pJaHZoTkFRMEJBaElFCkVBNE9Bd1AvL3dFQUFBQUFBQUFBQUFBd0VBWUtLb1pJaHZoTkFRMEJBd1FDQUFBd0ZBWUtLb1pJaHZoTkFRMEIKQkFRR0FHQnFBQUFBTUE4R0NpcUdTSWI0VFFFTkFRVUtBUUV3SGdZS0tvWklodmhOQVEwQkJnUVEvcUROMCsybwphTUhhTWhOTENDMGFaekJFQmdvcWhraUcrRTBCRFFFSE1EWXdFQVlMS29aSWh2aE5BUTBCQndFQkFmOHdFQVlMCktvWklodmhOQVEwQkJ3SUJBUUF3RUFZTEtvWklodmhOQVEwQkJ3TUJBUUF3Q2dZSUtvWkl6ajBFQXdJRFNBQXcKUlFJaEFLSERHUnI0TGx3YmRkczczdGZPTzVNMDRqclpERXBCU1dJQWRUb1VvdXFDQWlCOFloVW11UjU1TmNIUApVVjFSa25uZ0lJbjFHMWgzWEtvRWcyTVNwOERtWnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDbGpDQ0FqMmdBd0lCQWdJVkFKVnZYYzI5RytIcFFFbkoxUFF6emdGWEM5NVVNQW9HQ0NxR1NNNDlCQU1DCk1HZ3hHakFZQmdOVkJBTU1FVWx1ZEdWc0lGTkhXQ0JTYjI5MElFTkJNUm93R0FZRFZRUUtEQkZKYm5SbGJDQkQKYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CTVFzdwpDUVlEVlFRR0V3SlZVekFlRncweE9EQTFNakV4TURVd01UQmFGdzB6TXpBMU1qRXhNRFV3TVRCYU1IQXhJakFnCkJnTlZCQU1NR1VsdWRHVnNJRk5IV0NCUVEwc2dVR3hoZEdadmNtMGdRMEV4R2pBWUJnTlZCQW9NRVVsdWRHVnMKSUVOdmNuQnZjbUYwYVc5dU1SUXdFZ1lEVlFRSERBdFRZVzUwWVNCRGJHRnlZVEVMTUFrR0ExVUVDQXdDUTBFeApDekFKQmdOVkJBWVRBbFZUTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFTlNCLzd0MjFsWFNPCjJDdXpweHc3NGVKQjcyRXlER2dXNXJYQ3R4MnRWVExxNmhLazZ6K1VpUlpDbnFSN3BzT3ZncUZlU3hsbVRsSmwKZVRtaTJXWXozcU9CdXpDQnVEQWZCZ05WSFNNRUdEQVdnQlFpWlF6V1dwMDBpZk9EdEpWU3YxQWJPU2NHckRCUwpCZ05WSFI4RVN6QkpNRWVnUmFCRGhrRm9kSFJ3Y3pvdkwyTmxjblJwWm1sallYUmxjeTUwY25WemRHVmtjMlZ5CmRtbGpaWE11YVc1MFpXd3VZMjl0TDBsdWRHVnNVMGRZVW05dmRFTkJMbVJsY2pBZEJnTlZIUTRFRmdRVWxXOWQKemIwYjRlbEFTY25VOURQT0FWY0wzbFF3RGdZRFZSMFBBUUgvQkFRREFnRUdNQklHQTFVZEV3RUIvd1FJTUFZQgpBZjhDQVFBd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ1hzVmtpMHcraTZWWUdXM1VGLzIydWFYZTBZSkRqMVVlCm5BK1RqRDFhaTVjQ0lDWWIxU0FtRDV4a2ZUVnB2bzRVb3lpU1l4ckRXTG1VUjRDSTlOS3lmUE4rCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KADANBgkqhkiG9w0BAQsFAAOCAQEAmYd0MHGX0k5TWpEHiSlouDfCwOwGzy1jC+y+8mh78zf08XcKmjiats9ureRLhmZWinuN4iL2Ordl+G2eFtvVBt16JMPGPwjhPOioVj1jLkcv5yuwyZ56yWRUJuH6JlR1gFuDJZ3a7nmMobGwbNFfAni/eaDdnSABffcvE15ySE5kOEPNdQLsZP/nLSBAWXSmrak7xvHjBEQgdrP2nDTjN836HPN+v/a7G/51ncfurPOe0nNilKOgLIJlFuORv5kX2as3t+zgYjQckUPadHhoLShAen36u7Cu6i6S39hhFaVOEEM8Bb4GbJP/3U4H8RO/cmQxhlUSejnTewrEesKRAw==
-----END CERTIFICATE-----"#,
        r#"-----BEGIN CERTIFICATE-----
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
-----END CERTIFICATE-----"#,
        r#"-----BEGIN CERTIFICATE-----
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
-----END CERTIFICATE-----"#,
        r#"-----BEGIN CERTIFICATE-----
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
-----END CERTIFICATE-----"#,
        r#"-----BEGIN CERTIFICATE-----
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VzUwWld3Z1EyOXljRzl5WVhScGIyNHhGREFTQmdOVkJBY01DMU5oYm5SaElFTnNZWEpoTVFzd0NRWURWUVFJCkRBSkRRVEVMTUFrR0ExVUVCaE1DVlZNd0hoY05NalF3TnpJek1ETXlPVFV3V2hjTk16RXdOekl6TURNeU9UVXcKV2pCd01TSXdJQVlEVlFRRERCbEpiblJsYkNCVFIxZ2dVRU5MSUVObGNuUnBabWxqWVhSbE1Sb3dHQVlEVlFRSwpEQkZKYm5SbGJDQkRiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WCkJBZ01Ba05CTVFzd0NRWURWUVFHRXdKVlV6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJPbGwKajlVZUx6RzVZYms3ZnE4K1ZibnF0bmMraXJJM1B2d0RNUkhHL0h6M2RtakpOL2g4RHlkZkc2NS92NmwyUGVTUQoxWG5tMDVsMVRobmxDcVdaWWM2amdnTU9NSUlEQ2pBZkJnTlZIU01FR0RBV2dCU1ZiMTNOdlJ2aDZVQkp5ZFQwCk04NEJWd3ZlVkRCckJnTlZIUjhFWkRCaU1HQ2dYcUJjaGxwb2RIUndjem92TDJGd2FTNTBjblZ6ZEdWa2MyVnkKZG1salpYTXVhVzUwWld3dVkyOXRMM05uZUM5alpYSjBhV1pwWTJGMGFXOXVMM1l6TDNCamEyTnliRDlqWVQxdwpiR0YwWm05eWJTWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkdnKzdFUXZacXpuWlJ6djU3cWhLUzNSClZSMjdNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQ093WUpLb1pJaHZoTkFRMEIKQklJQ0xEQ0NBaWd3SGdZS0tvWklodmhOQVEwQkFRUVFSOFBKZ1RHTjJxSXd6VXpMTXhjcEZUQ0NBV1VHQ2lxRwpTSWI0VFFFTkFRSXdnZ0ZWTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VPTUJBR0N5cUdTSWI0VFFFTkFRSUNBZ0VPCk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFRE1CQUdDeXFHU0liNFRRRU5BUUlFQWdFRE1CRUdDeXFHU0liNFRRRU4KQVFJRkFnSUEvekFSQmdzcWhraUcrRTBCRFFFQ0JnSUNBUDh3RUFZTEtvWklodmhOQVEwQkFnY0NBUUV3RUFZTApLb1pJaHZoTkFRMEJBZ2dDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ2tDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ29DCkFRQXdFQVlMS29aSWh2aE5BUTBCQWdzQ0FRQXdFQVlMS29aSWh2aE5BUTBCQWd3Q0FRQXdFQVlMS29aSWh2aE4KQVEwQkFnMENBUUF3RUFZTEtvWklodmhOQVEwQkFnNENBUUF3RUFZTEtvWklodmhOQVEwQkFnOENBUUF3RUFZTApLb1pJaHZoTkFRMEJBaEFDQVFBd0VBWUxLb1pJaHZoTkFRMEJBaEVDQVEwd0h3WUxLb1pJaHZoTkFRMEJBaElFCkVBNE9Bd1AvL3dFQUFBQUFBQUFBQUFBd0VBWUtLb1pJaHZoTkFRMEJBd1FDQUFBd0ZBWUtLb1pJaHZoTkFRMEIKQkFRR0FHQnFBQUFBTUE4R0NpcUdTSWI0VFFFTkFRVUtBUUV3SGdZS0tvWklodmhOQVEwQkJnUVFyTE8yaTZUUgpRQ0dlS2FxMmg5UXJ2ekJFQmdvcWhraUcrRTBCRFFFSE1EWXdFQVlMS29aSWh2aE5BUTBCQndFQkFmOHdFQVlMCktvWklodmhOQVEwQkJ3SUJBUUF3RUFZTEtvWklodmhOQVEwQkJ3TUJBUUF3Q2dZSUtvWkl6ajBFQXdJRFNBQXcKUlFJaEFKcy84RHd5TEhobVhzVWFncmZWcXF5Q0EzbGI1Y0ZNaElUWUw0ZkUwd3AzQWlBZGFkMEJkZnlXWW1EVwpOeEZOamt3bzNoNjlicmdONnBUV3A2TlJHSlhLTWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDbGpDQ0FqMmdBd0lCQWdJVkFKVnZYYzI5RytIcFFFbkoxUFF6emdGWEM5NVVNQW9HQ0NxR1NNNDlCQU1DCk1HZ3hHakFZQmdOVkJBTU1FVWx1ZEdWc0lGTkhXQ0JTYjI5MElFTkJNUm93R0FZRFZRUUtEQkZKYm5SbGJDQkQKYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CTVFzdwpDUVlEVlFRR0V3SlZVekFlRncweE9EQTFNakV4TURVd01UQmFGdzB6TXpBMU1qRXhNRFV3TVRCYU1IQXhJakFnCkJnTlZCQU1NR1VsdWRHVnNJRk5IV0NCUVEwc2dVR3hoZEdadmNtMGdRMEV4R2pBWUJnTlZCQW9NRVVsdWRHVnMKSUVOdmNuQnZjbUYwYVc5dU1SUXdFZ1lEVlFRSERBdFRZVzUwWVNCRGJHRnlZVEVMTUFrR0ExVUVDQXdDUTBFeApDekFKQmdOVkJBWVRBbFZUTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFTlNCLzd0MjFsWFNPCjJDdXpweHc3NGVKQjcyRXlER2dXNXJYQ3R4MnRWVExxNmhLazZ6K1VpUlpDbnFSN3BzT3ZncUZlU3hsbVRsSmwKZVRtaTJXWXozcU9CdXpDQnVEQWZCZ05WSFNNRUdEQVdnQlFpWlF6V1dwMDBpZk9EdEpWU3YxQWJPU2NHckRCUwpCZ05WSFI4RVN6QkpNRWVnUmFCRGhrRm9kSFJ3Y3pvdkwyTmxjblJwWm1sallYUmxjeTUwY25WemRHVmtjMlZ5CmRtbGpaWE11YVc1MFpXd3VZMjl0TDBsdWRHVnNVMGRZVW05dmRFTkJMbVJsY2pBZEJnTlZIUTRFRmdRVWxXOWQKemIwYjRlbEFTY25VOURQT0FWY0wzbFF3RGdZRFZSMFBBUUgvQkFRREFnRUdNQklHQTFVZEV3RUIvd1FJTUFZQgpBZjhDQVFBd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ1hzVmtpMHcraTZWWUdXM1VGLzIydWFYZTBZSkRqMVVlCm5BK1RqRDFhaTVjQ0lDWWIxU0FtRDV4a2ZUVnB2bzRVb3lpU1l4ckRXTG1VUjRDSTlOS3lmUE4rCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KADANBgkqhkiG9w0BAQsFAAOCAQEAoHABye4ul+JSY3TUq62DtpCyXNID32bOZt1a95CfzM64uc0yH7bYEWoJHMR+AWxe0kYY8Gep2r4ND3p9CIyFiAOCXbsy3Q7NTwfeFhH81X5epme5mdraF0FPZL59UMy4LtpNpNN0JHN5DIBFHkP2t2UOThk8NHJ0PSfoKN36c0h9kZr3H8yX5AnaQmEgspv3B9FZZ/m67aN09HZskbjbf5GPMWcHTw/4r/bf0sfVJ1hDMN8gMoL2GIzV/0NYXu5OaNpj8NSvTPzYga3HgLudUbYcYs0dmmB3GhxOg4Vk9G9H9kSWUo1CfIHQm5KKIq3ZbRaToNb1SFzaAieVhMARqg==
-----END CERTIFICATE-----"#,
    ];

    let jwt = unsafe { CStr::from_ptr(jwt_cstr).to_str().unwrap() };

    verify_jwt_signature(jwt, &x5c_certs)
}

#[no_mangle]
pub extern "C" fn check_property(jwt_cstr: *const c_char, property_cstr: *const c_char, exp_value_cstr: *const c_char) -> bool{
    let jwt = unsafe { CStr::from_ptr(jwt_cstr).to_str().unwrap() };
    let property = unsafe { CStr::from_ptr(property_cstr).to_str().unwrap() };
    let exp_value = unsafe { CStr::from_ptr(exp_value_cstr).to_str().unwrap() };

    check_jwt_property(jwt, property, exp_value)
}

/*
fn main() -> Result<(), Box<dyn Error>> {
    // Example JWT token (replace with your actual token)
    let jwt = "eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vZmFhc21hdHRwcm92LmV1czIuYXR0ZXN0LmF6dXJlLm5ldC9jZXJ0cyIsImtpZCI6IkowcEFQZGZYWEhxV1dpbWdySDg1M3dNSWRoNS9mTGUxejZ1U1hZUFhDYTA9IiwidHlwIjoiSldUIn0.eyJleHAiOjE3MjgwOTAxMTMsImlhdCI6MTcyODA2MTMxMywiaXMtZGVidWdnYWJsZSI6dHJ1ZSwiaXNzIjoiaHR0cHM6Ly9mYWFzbWF0dHByb3YuZXVzMi5hdHRlc3QuYXp1cmUubmV0IiwianRpIjoiNmQyNWIyMjNlMmJhMTFkNmExMWY4NWE2Y2RiYzE1NzcwNjE2ODJkMDczM2NmNGM2NWZiYjU4ZWJlODg4YTMzOSIsIm1hYS1hdHRlc3RhdGlvbmNvbGxhdGVyYWwiOnsicWVpZGNlcnRzaGFzaCI6ImE2NGQ2NDkxOTg1MDdkOGI1N2UzM2Y2M2FiMjY2ODM4ZjQzZjMyN2JkNGFhY2M3ODUxMGI2OTc2ZWQwNDZlMTAiLCJxZWlkY3JsaGFzaCI6ImFkZmExOTQyNDIwZTY5ZGY1MTE4ZmYwMDZiNTNhZTFlNWRmZDkxZTVhNTcxMjQyOTczMTI2Yjg2MGFkNWViMTMiLCJxZWlkaGFzaCI6Ijc3MDFmNjQ3MDBiN2Y1MDVkN2I0YjdhOTNlNDVkNWNkZThjZmM4NjViNjBmMWRkNDllY2JlZTk3OTBjMzM3MmUiLCJxdW90ZWhhc2giOiI0NDNmN2JmY2QxN2U0YjI3NmQ1ODI1Nzk0MTJiZmE2YjNjMWI5YTU2N2FlZjE1YmE1ZDJiNDdiZTRhMGVlOWVhIiwidGNiaW5mb2NlcnRzaGFzaCI6ImE2NGQ2NDkxOTg1MDdkOGI1N2UzM2Y2M2FiMjY2ODM4ZjQzZjMyN2JkNGFhY2M3ODUxMGI2OTc2ZWQwNDZlMTAiLCJ0Y2JpbmZvY3JsaGFzaCI6ImFkZmExOTQyNDIwZTY5ZGY1MTE4ZmYwMDZiNTNhZTFlNWRmZDkxZTVhNTcxMjQyOTczMTI2Yjg2MGFkNWViMTMiLCJ0Y2JpbmZvaGFzaCI6IjY4NjRjNjg3NGMyZWYzNmJjOTJlNTg3ZTAwOTMwYmYzZWEwYmM0ODYyZDA2YjBmYmU2YWY4NjMyN2UwNGMzNTcifSwibmJmIjoxNzI4MDYxMzEzLCJwcm9kdWN0LWlkIjowLCJzZ3gtbXJlbmNsYXZlIjoiNjUwNmIzYmI2NmFlMTQ0MWYyYzIwODZlMjM0MGYzNzY2M2YyZDU4ZmJhYTViZDYwMWE3MTFiMDRiNDk3ZTE0NSIsInNneC1tcnNpZ25lciI6IjgzZDcxOWU3N2RlYWNhMTQ3MGY2YmFmNjJhNGQ3NzQzMDNjODk5ZGI2OTAyMGY5YzcwZWUxZGZjMDhjN2NlOWUiLCJzdm4iOjAsInRlZSI6InNneCIsIngtbXMtYXR0ZXN0YXRpb24tdHlwZSI6InNneCIsIngtbXMtcG9saWN5Ijp7ImlzLWRlYnVnZ2FibGUiOnRydWUsInByb2R1Y3QtaWQiOjAsInNneC1tcmVuY2xhdmUiOiI2NTA2YjNiYjY2YWUxNDQxZjJjMjA4NmUyMzQwZjM3NjYzZjJkNThmYmFhNWJkNjAxYTcxMWIwNGI0OTdlMTQ1Iiwic2d4LW1yc2lnbmVyIjoiODNkNzE5ZTc3ZGVhY2ExNDcwZjZiYWY2MmE0ZDc3NDMwM2M4OTlkYjY5MDIwZjljNzBlZTFkZmMwOGM3Y2U5ZSIsInN2biI6MCwidGVlIjoic2d4In0sIngtbXMtcG9saWN5LWhhc2giOiJPd0V2cFNWRVdBNWVpc0NFbmNCdDhOU1pGTFlEUktvTGFvT05Qclpnb2VZIiwieC1tcy1zZ3gtY29sbGF0ZXJhbCI6eyJxZWlkY2VydHNoYXNoIjoiYTY0ZDY0OTE5ODUwN2Q4YjU3ZTMzZjYzYWIyNjY4MzhmNDNmMzI3YmQ0YWFjYzc4NTEwYjY5NzZlZDA0NmUxMCIsInFlaWRjcmxoYXNoIjoiYWRmYTE5NDI0MjBlNjlkZjUxMThmZjAwNmI1M2FlMWU1ZGZkOTFlNWE1NzEyNDI5NzMxMjZiODYwYWQ1ZWIxMyIsInFlaWRoYXNoIjoiNzcwMWY2NDcwMGI3ZjUwNWQ3YjRiN2E5M2U0NWQ1Y2RlOGNmYzg2NWI2MGYxZGQ0OWVjYmVlOTc5MGMzMzcyZSIsInF1b3RlaGFzaCI6IjQ0M2Y3YmZjZDE3ZTRiMjc2ZDU4MjU3OTQxMmJmYTZiM2MxYjlhNTY3YWVmMTViYTVkMmI0N2JlNGEwZWU5ZWEiLCJ0Y2JpbmZvY2VydHNoYXNoIjoiYTY0ZDY0OTE5ODUwN2Q4YjU3ZTMzZjYzYWIyNjY4MzhmNDNmMzI3YmQ0YWFjYzc4NTEwYjY5NzZlZDA0NmUxMCIsInRjYmluZm9jcmxoYXNoIjoiYWRmYTE5NDI0MjBlNjlkZjUxMThmZjAwNmI1M2FlMWU1ZGZkOTFlNWE1NzEyNDI5NzMxMjZiODYwYWQ1ZWIxMyIsInRjYmluZm9oYXNoIjoiNjg2NGM2ODc0YzJlZjM2YmM5MmU1ODdlMDA5MzBiZjNlYTBiYzQ4NjJkMDZiMGZiZTZhZjg2MzI3ZTA0YzM1NyJ9LCJ4LW1zLXNneC1pcy1kZWJ1Z2dhYmxlIjp0cnVlLCJ4LW1zLXNneC1tcmVuY2xhdmUiOiI2NTA2YjNiYjY2YWUxNDQxZjJjMjA4NmUyMzQwZjM3NjYzZjJkNThmYmFhNWJkNjAxYTcxMWIwNGI0OTdlMTQ1IiwieC1tcy1zZ3gtbXJzaWduZXIiOiI4M2Q3MTllNzdkZWFjYTE0NzBmNmJhZjYyYTRkNzc0MzAzYzg5OWRiNjkwMjBmOWM3MGVlMWRmYzA4YzdjZTllIiwieC1tcy1zZ3gtcHJvZHVjdC1pZCI6MCwieC1tcy1zZ3gtcmVwb3J0LWRhdGEiOiI1MmM0YmJjZWViNTkxMjRkNTg0NzQzZTc1MGQ0NmNhN2FiOTU2YzlkZDAzMmU4ODcyYjM3MjcwNWZhOWRlNGUzYTliZTVkZGVkNzM0Yzg1Nzg1NDM0NTNiOWE5OGFjYjQxOTUxNDYzYjUxZGUzNjIzYzRiNjc5NWM1MjYyZmE1MyIsIngtbXMtc2d4LXN2biI6MCwieC1tcy1zZ3gtdGNiaWRlbnRpZmllciI6IjEwIiwieC1tcy12ZXIiOiIxLjAifQ.2MHmljiFFxQzlU3qLHoEGx2wcyvXXOyLUdaMzekYiuG2ZiEh4H-g1PI-TymWpdUFkT-0a2zw06tdP0IOWmbvqF-uSta3wlINN1LmsBapZiLBwxYH2otTvr1z9oy1iRMhe44x_fOplLLmL4buaw4xjm1zqzKtHHpwQUQCWVAyZF9BQ3-yi6ssf-4HYBr-8bvwbxHR8HbAgAdC8meAjkV8Z15V0BF3cnC8hkjbq-OlAAzgFORL6nNpQy_CXp6LgPknInubBECxMU6ybRk-_MI1jqy6Ko-rTHYbAC0bmZiM3VwILDEQDLnT-3EcMfELaYHmRTH7I8LKHbQxDbSOw-ydKA";

    // Verify if the JWT is signed by any of the certificates in x5c
    let is_valid = verify_jwt_signature(jwt, &x5c_certs)?;

    if is_valid {
        println!("JWT signature is valid!");
    } else {
        println!("JWT signature is invalid.");
    }

    Ok(())
}
*/
